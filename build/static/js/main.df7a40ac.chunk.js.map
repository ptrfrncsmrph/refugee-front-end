{"version":3,"sources":["store/actions/index.js","store/reducers/index.js","components/Login/LoginForm.js","Views/LoginView.js","components/StoryForm/StoryForm.js","Views/StoryFormView.js","components/Story/Story.js","Views/IndivStoryView.js","App.js","serviceWorker.js","index.js"],"names":["GET_STORIES","GET_STORIES_SUCCESS","GET_STORIES_FAILURE","SUBMITTING_STORY_START","SUBMITTING_STORY_SUCCESS","SUBMITTING_FAIL","initialState","stories","gettingStories","submittingStory","storySubmitted","error","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","login","payload","Login","props","react_default","a","createElement","className","onSubmit","submitLogin","InputGroup","InputGroupAddon","addonType","Input","placeholder","onChange","handleChanges","step","Button","color","LoginView","username","password","e","_this","setState","defineProperty","target","name","value","handleSubmit","event","preventDefault","axios","post","then","res","console","log","data","token","localStorage","setItem","catch","err","LoginForm","this","React","Component","StoryForm","Form","FormGroup","Label","for","handleChange","submission","title","text","onClick","addStory","AddNewStory","id","approved","submitStory","StoryForm_StoryForm","connect","story","dispatch","Story","_ref","match","indivstory","find","concat","params","NavLink","exact","to","IndivStoryView","getStories","Story_Story","get","App","Route","path","render","Views_LoginView","StoryFormView","component","Boolean","window","location","hostname","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","es","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df7a40ac.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const GET_STORIES = 'GET_STORIES';\nexport const GET_STORIES_SUCCESS = 'GET_STORIES_SUCCESS';\nexport const GET_STORIES_FAILURE = 'GET_STORIES_SUCCESS';\n\nexport const SUBMITTING_STORY_START = 'SUBMITTING_STORY_START';\nexport const SUBMITTING_STORY_SUCCESS = 'SUBMITTING_STORY_SUCCESS';\nexport const SUBMITTING_FAIL = 'SUBMITTING_FAIL';\n\n\n//functionality for fetching the stories data from the backend\n//used on both the individual story view and the main listed story view\n\nexport const getStories = () => dispatch => {\n    dispatch({type: GET_STORIES});\n    axios\n        .get('')\n        .then(res => \n            dispatch({type: GET_STORIES_SUCCESS, payload: res.data}))\n        .catch(err => \n            dispatch({type: GET_STORIES_FAILURE, payload: err}));\n};\n\n\n//fucntionality for user to submit story into approval queue\n\nexport const submitStory = story => dispatch => {\n    dispatch({type: SUBMITTING_STORY_START});\n    axios\n        .post('', story)\n        .then(res => {\n            dispatch({type: SUBMITTING_STORY_SUCCESS, payload: res.data})\n        })\n        .catch(err => dispatch({type: SUBMITTING_FAIL, payload: err}));\n};\n\n\n//functionality for admin to see stories that need approval\n\n// export const approveStory = story => dispatch => {\n//     dispatch({type: })\n// }\n","import {\n    GET_STORIES,\n    GET_STORIES_SUCCESS,\n    GET_STORIES_FAILURE,\n    SUBMITTING_STORY_START,\n    SUBMITTING_STORY_SUCCESS,\n    SUBMITTING_FAIL,\n    \n} from '../actions';\n\nconst initialState = {\n    stories: [],\n    gettingStories: false,\n    submittingStory: true,\n    storySubmitted: false,\n    error: null,\n}\n\nfunction reducer(state = initialState, action) {\n    switch(action.type) {\n\n        case GET_STORIES:\n        return {\n            ...state,\n            gettingStories:true\n        }\n        case  GET_STORIES_SUCCESS:\n        return {\n            ...state,\n            login: action.payload,\n            gettingStories: false,\n        }\n        case GET_STORIES_FAILURE:\n        return {\n            ...state,\n            error: null,\n        }\n\n\n        case SUBMITTING_STORY_START:\n        return {\n            ...state,\n            submittingStory: true,\n        }\n        case SUBMITTING_STORY_SUCCESS:\n        return {\n            ...state,\n            storySubmitted: true,\n        }\n        case SUBMITTING_FAIL:\n        return {\n            ...state,\n            error: null,\n        }\n        \n        default:\n        return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport { InputGroup, InputGroupAddon, InputGroupText, Input, Button } from 'reactstrap';\n\nfunction Login(props) {\n\n    \n    return (\n        <div className=\"loginForm\">\n            <form onSubmit={props.submitLogin}>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">Username</InputGroupAddon>\n                    <Input \n                        placeholder=\"\"\n                        type=\"text\"\n                        onChange={props.handleChanges} \n                    />\n                </InputGroup>\n                <br />\n                <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">Password</InputGroupAddon>\n                    <Input \n                        placeholder=\"\" \n                        type=\"text\" \n                        step=\"1\"\n                        onChange={props.handleChanges} \n                    />\n                <InputGroupAddon addonType=\"append\">\n                    <Button color=\"secondary\">Log In</Button>\n                </InputGroupAddon>\n                </InputGroup>\n\n                \n            </form>\n\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react';\nimport axios from 'axios';\n\nimport {adminLogIn} from '../store/actions';\n\nimport LoginForm from '../components/Login/LoginForm';\n\nclass LoginView extends React.Component {\n    state= {\n        login: {\n            \n            username: '',\n            password: ''\n        }\n    };\n\n    handleChanges = e => {\n        this.setState({ [e.target.name]: e.target.value});\n    }\n\n    \n\n    handleSubmit = event => {\n        event.preventDefault();\n        //const endpoint = `${process.env.REACT_APP_API_URL}/api/login`;\n        const endpoint = 'http://localhost:4000/login';\n\n        axios\n            .post(endpoint, this.state)\n            .then(res => {\n                console.log('response', res.data.token)\n                localStorage.setItem('jwt', res.data.token);\n            })\n            .catch(err => console.log(err))\n    }\n    \n\n\n    render() {\n        return (\n            <LoginForm \n                handleChanges={this.handleChanges}\n                submitLogin={this.handleSubmit}\n            />\n        );\n    }\n}\n\nexport default LoginView;","import React from 'react';\n\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nfunction StoryForm(props) {\n\n    const handleClick = e => {\n        e.preventDefault();\n        props.addStory();\n    }\n\n    return (\n        <div className=\"StoryForm\">\n            <Form>\n                <FormGroup>\n                    <Label for=\"name-title\">Name</Label>\n                    <Input \n                        type=\"text\" \n                        name=\"title\" \n                        placeholder=\"please feel free to remain anonymous by entering a false name\" \n                        onChange={props.handleChange}\n                        value={props.submission.title}\n                        />\n                </FormGroup>\n            \n                <FormGroup>\n                    <Label for=\"submission-text\">Share your story</Label>\n                    <Input \n                        type=\"textarea\" \n                        name=\"text\" \n                        placeholder=\"...\"\n                        onChange={props.handleChange}\n                        value={props.submission.text}\n                    />\n                </FormGroup>\n                <Button onClick={handleClick}>Submit</Button>\n           \n            </Form>\n\n        </div>\n    )\n\n}\n\nexport default StoryForm;\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {submitStory} from '../store/actions';\n\nimport StoryForm from '../components/StoryForm/StoryForm';\n\nclass AddNewStory extends React.Component {\n    state= {\n        submission: {\n            id: '',\n            title: '',\n            text: '',\n            approved: false,\n        }\n    };\n\n    handleChange = e => {\n        this.setState({\n            submission: {\n                ...this.state.submission,\n                [e.target.name]: e.target.value\n            }\n        });\n    };\n\n    addStory = () => {\n        this.props.submitStory(this.state.submission);\n    };\n\n    render() {\n        return (\n            <div>\n                <StoryForm \n                    handleChange={this.handleChange}\n                    submission={this.state.submission}\n                    addStory={this.addStory}\n                />\n\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = state => ({});\n\nexport default connect(\n    mapStateToProps,\n    {submitStory}\n)(AddNewStory);","import React from 'react';\nimport { Route, NavLink } from \"react-router-dom\";\n\nfunction Story({stories, match}) {\n    const indivstory = stories.find(submission => `${submission.id}` === match.params.id)\n\n    return (\n        <div className=\"IndivStory\">\n            <div className=\"story-image\">\n                <img />\n            </div>\n            <div className=\"story-title\">\n                <h2>Title or Name</h2>\n            </div>\n            <div>\n                <p>Posted Story</p>\n            </div>\n            <nav className=\"story-sub-nav\">\n                <NavLink exact to={`/story-list/${indivstory.id}`}>Read More...</NavLink>\n            </nav>\n        </div>\n        \n    );\n}\n\n\nexport default Story;","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {getStories} from '../store/actions';\n\nimport Story from '../components/Story/Story';\n\nclass IndivStoryView extends React.Component {\n    componentDidMount() {\n        if (this.props.stories.length === 0) {\n            this.props.getStories();\n        }\n    }\n\n\n    render() {\n        return (\n            <Story \n                story={this.props.stories}\n                match={this.props.match}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    stories: state.stories\n});\n\nexport default connect(\n    mapStateToProps,\n    {getStories}\n)(IndivStoryView);","import React, { Component } from 'react';\n\nimport {Route, NavLink} from 'react-router-dom';\n\nimport LoginView from './Views/LoginView';\nimport StoryFormView from './Views/StoryFormView';\nimport IndivStoryView from './Views/IndivStoryView';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <nav>\n          <div className=\"nav-links\">\n            <NavLink exact to=\"/\">Home</NavLink>\n\n            <NavLink exact to=\"/story-form\">Share Your Story</NavLink>\n            \n            <NavLink exact to=\"/login\">Admin Login</NavLink>\n          </div>\n        </nav>\n\n        <Route exact path=\"/login\"\n          render={props => <LoginView {...props} /> }\n        />\n        \n        <Route exact path=\"/story-form\"\n          render={props => <StoryFormView {...props} />}\n        />\n\n        <Route path='/story-list/:id' component={IndivStoryView} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route, NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport rootReducer from './store/reducers/index';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer,\n  composeEnhancers(applyMiddleware(thunk, logger))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}